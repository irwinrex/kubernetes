# Cert-Manager ClusterIssuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: playforeverbot@protonmail.com  # Your email for Let's Encrypt notifications
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
      - http01:
          ingress:
            class: traefik  # This should match the Traefik Ingress class

---

# Persistent Volume for Traefik ACME certificates
apiVersion: v1
kind: PersistentVolume
metadata:
  name: traefik-acme-pv
spec:
  capacity:
    storage: 1Gi  # Adjust as needed
  accessModes:
    - ReadWriteOnce
  hostPath:  # Using hostPath for local testing; change this for production
    path: /mnt/acme  # Change to your desired path on the host

---

# Persistent Volume Claim for Traefik ACME certificates
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: traefik-acme-pvc
  namespace: kube-system
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi  # Should match the PV capacity

---

# Helm chart configuration for Traefik
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: traefik
  namespace: kube-system
spec:
  chart: traefik
  repo: https://helm.traefik.io/traefik
  targetNamespace: kube-system
  version: "32.0.0"
  valuesContent: |-
    additionalArguments:
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=false"  # Disable insecure access in production
    entryPoints:
      web:
        address: ":80"
      websecure:
        address: ":443"
    providers:
      kubernetesCRD:
        allowCrossNamespace: true
    certificatesResolvers:
      letsencrypt:
        acme:
          email: "playforeverbot@protonmail.com"
          storage: "/mnt/acme/acme.json"
          httpChallenge:
            entryPoint: web
    ports:
      web:
        expose:  # Changed to object
          enabled: true  # Enables exposure of the web entrypoint
          port: 80       # Optional, specify the exposed port (default: 80)
        exposedPort: 80
        port: 8000
      websecure:
        expose:  # Changed to object
          enabled: true  # Enables exposure of the websecure entrypoint
          port: 443      # Optional, specify the exposed port (default: 443)
        exposedPort: 443
        port: 8443
    persistence:
      enabled: true  # Enable persistence for ACME certificates
      existingClaim: traefik-acme-pvc  # Reference the PVC
      mountPath: /mnt/acme  # Adjust this path to match the ACME storage path defined in certificatesResolvers
kind: HelmChart
metadata:
  name: traefik
  namespace: kube-system
spec:
  chart: traefik
  repo: https://helm.traefik.io/traefik
  targetNamespace: kube-system
  version: "32.0.0"
  valuesContent: |-
    additionalArguments:
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=false"  # Disable insecure access in production
    entryPoints:
      web:
        address: ":80"
      websecure:
        address: ":443"
    providers:
      kubernetesCRD:
        allowCrossNamespace: true
    certificatesResolvers:
      letsencrypt:
        acme:
          email: "playforeverbot@protonmail.com"
          storage: "/mnt/acme/acme.json"
          httpChallenge:
            entryPoint: web
    ports:
      web:
        expose:
          enabled: true  # Change boolean to object
        exposedPort: 80
        port: 8000
      websecure:
        expose:
          enabled: true  # Change boolean to object
        exposedPort: 443
        port: 8443
    persistence:
      enabled: true
      existingClaim: traefik-acme-pvc
      mountPath: /mnt/acme
kind: HelmChart
metadata:
  name: traefik
  namespace: kube-system
spec:
  chart: traefik
  repo: https://helm.traefik.io/traefik
  targetNamespace: kube-system
  version: "32.0.0"  # Use "latest" or specify a version
  valuesContent: |-
    additionalArguments:
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=false"  # Disable insecure access in production
    entryPoints:
      web:
        address: ":80"
      websecure:
        address: ":443"
    providers:
      kubernetesCRD:
        allowCrossNamespace: true
    certificatesResolvers:
      letsencrypt:
        acme:
          email: "playforeverbot@protonmail.com"
          storage: "/mnt/acme/acme.json"
          httpChallenge:
            entryPoint: web
    ports:
      web:
        exposedPort: 80
        port: 8000
      websecure:
        exposedPort: 443
        port: 8443
    persistence:
      enabled: true  # Enable persistence for ACME certificates
      existingClaim: traefik-acme-pvc  # Reference the PVC
      mountPath: /mnt/acme  # Adjust this path to match the ACME storage path defined in certificatesResolvers

---

# Service for Traefik Dashboard
apiVersion: v1
kind: Service
metadata:
  name: traefik-dashboard
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/name: traefik-dashboard
spec:
  type: LoadBalancer
  ports:
    - name: traefik
      port: 9000
      targetPort: 9000
      protocol: TCP
  selector:
    app.kubernetes.io/instance: traefik
    app.kubernetes.io/name: traefik

---

# Ingress Resource for Traefik Dashboard
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: traefik-ingress
  namespace: kube-system
  annotations:
    # kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    cert-manager.io/issuer: letsencrypt-prod  # Reference the ClusterIssuer
spec:
  tls:
    - hosts:
        - localhost  # Using localhost for local testing
      secretName: traefik-cert  # The name of the secret where the certificate will be stored
  rules:
    - host: localhost  # Using localhost for local testing
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: traefik-dashboard
                port:
                  number: 9000
