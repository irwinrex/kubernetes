# Create a namespace
apiVersion: v1
kind: Namespace
metadata:
  name: irwinrex
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: allow-health-probes
  namespace: irwinrex  # Ensure this matches your deployment namespace
spec:
  endpointSelector:
    matchLabels:
      app: sample-pod  # Match pods with this label
  ingress:
  - fromEntities:
    - all  # Allow traffic from all entities (or specify as needed)
    toPorts:
    - ports:
      - port: "7000"  # Replace with your liveness probe port as a string
        protocol: TCP
      - port: "7000"  # Replace with your readiness probe port as a string
        protocol: TCP

---
# Secret definition for environment variables
apiVersion: v1
kind: Secret
metadata:
  name: secret-env
  namespace: irwinrex
type: Opaque
data:
  bye: "Ynll"  # Ensure this value is base64 encoded

---
# ConfigMap containing a JSON file as data
apiVersion: v1
kind: ConfigMap
metadata:
  name: secrets-json
  namespace: irwinrex
data:
  secrets.json: |
    {
      "hai": "hai"
    }
---
# HorizontalPodAutoscaler to scale the Deployment based on CPU and memory utilization
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-hpa
  namespace: irwinrex
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sample-api  # Target deployment to be scaled
  minReplicas: 1  # Minimum number of replicas
  maxReplicas: 3  # Maximum number of replicas
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80  # Target CPU utilization percentage
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80  # Target memory utilization percentage
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sample-pv
  labels:
    app: sample-pv
spec:
  capacity:
    storage: 1Gi  # Storage capacity of the PV
  accessModes:
    - ReadWriteMany  # Access mode allowing multiple pods to read/write
  hostPath:
    path: /mnt/efs  # The host path for local storage
  persistentVolumeReclaimPolicy: Retain  # Keeps the PV after its claim is deleted
  storageClassName: manual  # Matches the PVC storage class
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sample-pvc
  namespace: irwinrex  # Make sure this is the same namespace as your deployment
spec:
  selector:
    matchLabels:
      app: sample-pv  # Label selector for the PV
  accessModes:
    - ReadWriteMany  # Matches the access mode of the PV
  resources:
    requests:
      storage: 1Gi  # The requested storage, should match or be less than the PV capacity
  storageClassName: manual  # Must match the PV's storage class

---
# Deployment definition for the sample-api application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-api
  namespace: irwinrex
spec:
  replicas: 1  # Number of desired replicas
  selector:
    matchLabels:
      app: sample-pod  # Label selector for the pods
  template:
    metadata:
      labels:
        app: sample-pod  # Labels for the pods
        pod: sample-api  # Label for the pod
    spec:
      securityContext:
        runAsUser: 1000  # User ID to run the application
        runAsGroup: 1000  # Group ID to run the application
        fsGroup: 2000  # Group ID for file system permissions
      initContainers:
      - name: setup-permissions
        image: busybox
        command: ["sh", "-c", "chown 1000:1000 -R /mnt/efs && chmod 755 -R /mnt/efs"]
        volumeMounts:
          - name: api-storage
            mountPath: /mnt/efs
        securityContext:
          runAsUser: 0
          privileged: true
      containers:
      - name: sample-api
        image: dockerrexxzz/sampleapi:latest  # Replace with your Docker image name and tag
        imagePullPolicy: IfNotPresent
        envFrom:
          - secretRef:
              name: secret-env  # Environment variables from Secret
        resources:
          limits:
            memory: "256Mi"  # Adjust the memory limit as per your requirements
            cpu: "256m"       # Adjust the CPU limit as per your requirements
          requests:
            memory: "125Mi"
            cpu: "100m"
        ports:
          - name: sample-pod-port
            containerPort: 7000  # Application port
        readinessProbe:
          httpGet:
            path: /healthcheck # Health check path
            port: 7000
          initialDelaySeconds: 10  # Delay before the first probe
          periodSeconds: 5  # Frequency of probe
        livenessProbe:
          httpGet:
            path: /healthcheck  # Health check path
            port: 7000
          initialDelaySeconds: 15  # Delay before the first probe
        volumeMounts:
          - name: api-storage
            mountPath: /mnt/efs  # Mount the EFS volume inside the container
          - name: secret-json
            mountPath: /app/config/secrets.json  # Mount the ConfigMap file
            subPath: secrets.json  # Use subPath to map a specific file
      volumes:
        - name: api-storage
          persistentVolumeClaim:
            claimName: sample-pvc  # Use the PVC for storage
        - name: secret-json
          configMap:
            name: secrets-json  # Use the ConfigMap for secrets.json

---
# Service to expose the sample-api application within the cluster
apiVersion: v1
kind: Service
metadata:
  name: sample-service
  namespace: irwinrex
spec:
  selector:
    app: sample-pod  # Match pods with this label
    pod : sample-api # Label selector for the pod
  ports:
    - name: sample-svc-port
      protocol: TCP
      port: 8000  # Service <your-namespace>port
      targetPort: sample-pod-port  # Port on the pod
  type: ClusterIP  # Service type

---
# Ingress resource to route traffic to the sample-service
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: sample-ingress
#   namespace: irwinrex
#   annotations:
#     traefik.ingress.kubernetes.io/router.entrypoints: web  # Use the "web" entrypoint in Traefik
# spec:
#   rules:
#     - host: first.itsnota.site  # Replace with your domain or use nip.io for testing
#       http:
#         paths:
#           - path: /
#             pathType: Prefix  # Path type can be Exact or Prefix
#             backend:
#               service:
#                 name: sample-service  # Service name to route traffic to
#                 port:
#                   name: sample-svc-port  # Service port

