apiVersion: v1
kind: Secret
metadata:
  name: secret-env
type: Opaque
data:
  bye: "Ynll"  # Ensure this value is base64 encoded

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: secrets-json
data:
  secrets.json: |
    {
      "hai": "hai"
    }

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sample-api
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 20
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 20

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: api-pv
  labels:
    app: api-pv
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 1Gi
  hostPath:
    path: /mnt/efs
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: api-pvc
  namespace: default
spec:
  resources:
    requests:
      storage: 1Gi  # Define the desired storage capacity
  accessModes:
    - ReadWriteOnce
  storageClassName: manual

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-api
  template:
    metadata:
      labels:
        app: sample-api
    spec:
      initContainers:
      - name: setup-permissions
        image: busybox
        command: ["sh", "-c", "chmod 777 -R /mnt/efs"]
        volumeMounts:
        - name: api-storage
          mountPath: /mnt/efs
      containers:
      - name: sample-api
        image: dockerrexxzz/dj:v1 # Replace with your Docker image name and tag
        imagePullPolicy: Always
        envFrom:
        - secretRef:
            name: secret-env
        resources:
          limits:
            memory: "250Mi" # Adjust the memory limit as per your requirements
            cpu: "250m"     # Adjust the CPU limit as per your requirements
          requests:
            memory: "125Mi"
            cpu: "100m"
        ports:
        - name: sample-port
          containerPort: 7000
        readinessProbe:
          httpGet:
            path: /home  # Adjust the path based on your application's health check endpoint
            port: 7000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /home  # Adjust the path based on your application's health check endpoint
            port: 7000
          initialDelaySeconds: 15
        volumeMounts:
        - name: api-storage
          mountPath: /mnt/efs
        - name: secret-json
          mountPath: /app/config/secrets.json
          subPath: secrets.json
      volumes:
      - name: api-storage
        persistentVolumeClaim:
          claimName: api-pvc
      - name: secret-json
        configMap:
          name: secrets-json

---
apiVersion: v1
kind: Service
metadata:
  name: sample-service
spec:
  selector:
    app: sample-api  # This should match the label in the deployment template
  ports:
    - name: sample-port
      protocol: TCP
      port: 8000
      targetPort: sample-port
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sample-ingress
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
  - host: sample-ing.local  # Replace with your domain or use nip.io for testing
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sample-service
            port:
              number: 8000
